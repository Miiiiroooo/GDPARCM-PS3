// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/SceneLoader.proto
#ifndef GRPC_proto_2fSceneLoader_2eproto__INCLUDED
#define GRPC_proto_2fSceneLoader_2eproto__INCLUDED

#include "SceneLoader.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class SceneLoader final {
 public:
  static constexpr char const* service_full_name() {
    return "SceneLoader";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ModelData>> LoadModelsInScene(::grpc::ClientContext* context, const ::IntValue& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ModelData>>(LoadModelsInSceneRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ModelData>> AsyncLoadModelsInScene(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ModelData>>(AsyncLoadModelsInSceneRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ModelData>> PrepareAsyncLoadModelsInScene(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ModelData>>(PrepareAsyncLoadModelsInSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::TextureData>> LoadTexturesInScene(::grpc::ClientContext* context, const ::IntValue& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::TextureData>>(LoadTexturesInSceneRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TextureData>> AsyncLoadTexturesInScene(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TextureData>>(AsyncLoadTexturesInSceneRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TextureData>> PrepareAsyncLoadTexturesInScene(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TextureData>>(PrepareAsyncLoadTexturesInSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ObjectData>> LoadObjectsInScene(::grpc::ClientContext* context, const ::IntValue& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ObjectData>>(LoadObjectsInSceneRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ObjectData>> AsyncLoadObjectsInScene(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ObjectData>>(AsyncLoadObjectsInSceneRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ObjectData>> PrepareAsyncLoadObjectsInScene(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ObjectData>>(PrepareAsyncLoadObjectsInSceneRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSceneProgress(::grpc::ClientContext* context, const ::IntValue& request, ::FloatValue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FloatValue>> AsyncGetSceneProgress(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FloatValue>>(AsyncGetSceneProgressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FloatValue>> PrepareAsyncGetSceneProgress(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FloatValue>>(PrepareAsyncGetSceneProgressRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void LoadModelsInScene(::grpc::ClientContext* context, const ::IntValue* request, ::grpc::ClientReadReactor< ::ModelData>* reactor) = 0;
      virtual void LoadTexturesInScene(::grpc::ClientContext* context, const ::IntValue* request, ::grpc::ClientReadReactor< ::TextureData>* reactor) = 0;
      virtual void LoadObjectsInScene(::grpc::ClientContext* context, const ::IntValue* request, ::grpc::ClientReadReactor< ::ObjectData>* reactor) = 0;
      virtual void GetSceneProgress(::grpc::ClientContext* context, const ::IntValue* request, ::FloatValue* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSceneProgress(::grpc::ClientContext* context, const ::IntValue* request, ::FloatValue* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::ModelData>* LoadModelsInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ModelData>* AsyncLoadModelsInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ModelData>* PrepareAsyncLoadModelsInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::TextureData>* LoadTexturesInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TextureData>* AsyncLoadTexturesInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TextureData>* PrepareAsyncLoadTexturesInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::ObjectData>* LoadObjectsInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ObjectData>* AsyncLoadObjectsInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ObjectData>* PrepareAsyncLoadObjectsInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FloatValue>* AsyncGetSceneProgressRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FloatValue>* PrepareAsyncGetSceneProgressRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::ModelData>> LoadModelsInScene(::grpc::ClientContext* context, const ::IntValue& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ModelData>>(LoadModelsInSceneRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ModelData>> AsyncLoadModelsInScene(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ModelData>>(AsyncLoadModelsInSceneRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ModelData>> PrepareAsyncLoadModelsInScene(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ModelData>>(PrepareAsyncLoadModelsInSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::TextureData>> LoadTexturesInScene(::grpc::ClientContext* context, const ::IntValue& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::TextureData>>(LoadTexturesInSceneRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TextureData>> AsyncLoadTexturesInScene(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TextureData>>(AsyncLoadTexturesInSceneRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TextureData>> PrepareAsyncLoadTexturesInScene(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TextureData>>(PrepareAsyncLoadTexturesInSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::ObjectData>> LoadObjectsInScene(::grpc::ClientContext* context, const ::IntValue& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ObjectData>>(LoadObjectsInSceneRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ObjectData>> AsyncLoadObjectsInScene(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ObjectData>>(AsyncLoadObjectsInSceneRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ObjectData>> PrepareAsyncLoadObjectsInScene(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ObjectData>>(PrepareAsyncLoadObjectsInSceneRaw(context, request, cq));
    }
    ::grpc::Status GetSceneProgress(::grpc::ClientContext* context, const ::IntValue& request, ::FloatValue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FloatValue>> AsyncGetSceneProgress(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FloatValue>>(AsyncGetSceneProgressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FloatValue>> PrepareAsyncGetSceneProgress(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FloatValue>>(PrepareAsyncGetSceneProgressRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void LoadModelsInScene(::grpc::ClientContext* context, const ::IntValue* request, ::grpc::ClientReadReactor< ::ModelData>* reactor) override;
      void LoadTexturesInScene(::grpc::ClientContext* context, const ::IntValue* request, ::grpc::ClientReadReactor< ::TextureData>* reactor) override;
      void LoadObjectsInScene(::grpc::ClientContext* context, const ::IntValue* request, ::grpc::ClientReadReactor< ::ObjectData>* reactor) override;
      void GetSceneProgress(::grpc::ClientContext* context, const ::IntValue* request, ::FloatValue* response, std::function<void(::grpc::Status)>) override;
      void GetSceneProgress(::grpc::ClientContext* context, const ::IntValue* request, ::FloatValue* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::ModelData>* LoadModelsInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request) override;
    ::grpc::ClientAsyncReader< ::ModelData>* AsyncLoadModelsInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ModelData>* PrepareAsyncLoadModelsInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::TextureData>* LoadTexturesInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request) override;
    ::grpc::ClientAsyncReader< ::TextureData>* AsyncLoadTexturesInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::TextureData>* PrepareAsyncLoadTexturesInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::ObjectData>* LoadObjectsInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request) override;
    ::grpc::ClientAsyncReader< ::ObjectData>* AsyncLoadObjectsInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ObjectData>* PrepareAsyncLoadObjectsInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FloatValue>* AsyncGetSceneProgressRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FloatValue>* PrepareAsyncGetSceneProgressRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_LoadModelsInScene_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadTexturesInScene_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadObjectsInScene_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSceneProgress_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status LoadModelsInScene(::grpc::ServerContext* context, const ::IntValue* request, ::grpc::ServerWriter< ::ModelData>* writer);
    virtual ::grpc::Status LoadTexturesInScene(::grpc::ServerContext* context, const ::IntValue* request, ::grpc::ServerWriter< ::TextureData>* writer);
    virtual ::grpc::Status LoadObjectsInScene(::grpc::ServerContext* context, const ::IntValue* request, ::grpc::ServerWriter< ::ObjectData>* writer);
    virtual ::grpc::Status GetSceneProgress(::grpc::ServerContext* context, const ::IntValue* request, ::FloatValue* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadModelsInScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadModelsInScene() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_LoadModelsInScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadModelsInScene(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::grpc::ServerWriter< ::ModelData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadModelsInScene(::grpc::ServerContext* context, ::IntValue* request, ::grpc::ServerAsyncWriter< ::ModelData>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadTexturesInScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadTexturesInScene() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_LoadTexturesInScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadTexturesInScene(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::grpc::ServerWriter< ::TextureData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadTexturesInScene(::grpc::ServerContext* context, ::IntValue* request, ::grpc::ServerAsyncWriter< ::TextureData>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadObjectsInScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadObjectsInScene() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_LoadObjectsInScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadObjectsInScene(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::grpc::ServerWriter< ::ObjectData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadObjectsInScene(::grpc::ServerContext* context, ::IntValue* request, ::grpc::ServerAsyncWriter< ::ObjectData>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSceneProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSceneProgress() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetSceneProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSceneProgress(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::FloatValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSceneProgress(::grpc::ServerContext* context, ::IntValue* request, ::grpc::ServerAsyncResponseWriter< ::FloatValue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_LoadModelsInScene<WithAsyncMethod_LoadTexturesInScene<WithAsyncMethod_LoadObjectsInScene<WithAsyncMethod_GetSceneProgress<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_LoadModelsInScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LoadModelsInScene() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::IntValue, ::ModelData>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::IntValue* request) { return this->LoadModelsInScene(context, request); }));
    }
    ~WithCallbackMethod_LoadModelsInScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadModelsInScene(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::grpc::ServerWriter< ::ModelData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::ModelData>* LoadModelsInScene(
      ::grpc::CallbackServerContext* /*context*/, const ::IntValue* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LoadTexturesInScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LoadTexturesInScene() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::IntValue, ::TextureData>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::IntValue* request) { return this->LoadTexturesInScene(context, request); }));
    }
    ~WithCallbackMethod_LoadTexturesInScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadTexturesInScene(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::grpc::ServerWriter< ::TextureData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::TextureData>* LoadTexturesInScene(
      ::grpc::CallbackServerContext* /*context*/, const ::IntValue* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LoadObjectsInScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LoadObjectsInScene() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::IntValue, ::ObjectData>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::IntValue* request) { return this->LoadObjectsInScene(context, request); }));
    }
    ~WithCallbackMethod_LoadObjectsInScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadObjectsInScene(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::grpc::ServerWriter< ::ObjectData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::ObjectData>* LoadObjectsInScene(
      ::grpc::CallbackServerContext* /*context*/, const ::IntValue* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSceneProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSceneProgress() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::IntValue, ::FloatValue>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::IntValue* request, ::FloatValue* response) { return this->GetSceneProgress(context, request, response); }));}
    void SetMessageAllocatorFor_GetSceneProgress(
        ::grpc::MessageAllocator< ::IntValue, ::FloatValue>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IntValue, ::FloatValue>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSceneProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSceneProgress(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::FloatValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSceneProgress(
      ::grpc::CallbackServerContext* /*context*/, const ::IntValue* /*request*/, ::FloatValue* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_LoadModelsInScene<WithCallbackMethod_LoadTexturesInScene<WithCallbackMethod_LoadObjectsInScene<WithCallbackMethod_GetSceneProgress<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_LoadModelsInScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadModelsInScene() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_LoadModelsInScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadModelsInScene(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::grpc::ServerWriter< ::ModelData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadTexturesInScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadTexturesInScene() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_LoadTexturesInScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadTexturesInScene(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::grpc::ServerWriter< ::TextureData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadObjectsInScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadObjectsInScene() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_LoadObjectsInScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadObjectsInScene(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::grpc::ServerWriter< ::ObjectData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSceneProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSceneProgress() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetSceneProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSceneProgress(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::FloatValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadModelsInScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadModelsInScene() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_LoadModelsInScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadModelsInScene(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::grpc::ServerWriter< ::ModelData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadModelsInScene(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadTexturesInScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadTexturesInScene() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_LoadTexturesInScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadTexturesInScene(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::grpc::ServerWriter< ::TextureData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadTexturesInScene(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadObjectsInScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadObjectsInScene() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_LoadObjectsInScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadObjectsInScene(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::grpc::ServerWriter< ::ObjectData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadObjectsInScene(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSceneProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSceneProgress() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetSceneProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSceneProgress(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::FloatValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSceneProgress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LoadModelsInScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LoadModelsInScene() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->LoadModelsInScene(context, request); }));
    }
    ~WithRawCallbackMethod_LoadModelsInScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadModelsInScene(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::grpc::ServerWriter< ::ModelData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* LoadModelsInScene(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LoadTexturesInScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LoadTexturesInScene() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->LoadTexturesInScene(context, request); }));
    }
    ~WithRawCallbackMethod_LoadTexturesInScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadTexturesInScene(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::grpc::ServerWriter< ::TextureData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* LoadTexturesInScene(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LoadObjectsInScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LoadObjectsInScene() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->LoadObjectsInScene(context, request); }));
    }
    ~WithRawCallbackMethod_LoadObjectsInScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadObjectsInScene(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::grpc::ServerWriter< ::ObjectData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* LoadObjectsInScene(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSceneProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSceneProgress() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSceneProgress(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSceneProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSceneProgress(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::FloatValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSceneProgress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSceneProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSceneProgress() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IntValue, ::FloatValue>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IntValue, ::FloatValue>* streamer) {
                       return this->StreamedGetSceneProgress(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSceneProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSceneProgress(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::FloatValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSceneProgress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IntValue,::FloatValue>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetSceneProgress<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_LoadModelsInScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_LoadModelsInScene() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::IntValue, ::ModelData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::IntValue, ::ModelData>* streamer) {
                       return this->StreamedLoadModelsInScene(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_LoadModelsInScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadModelsInScene(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::grpc::ServerWriter< ::ModelData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedLoadModelsInScene(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::IntValue,::ModelData>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_LoadTexturesInScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_LoadTexturesInScene() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::IntValue, ::TextureData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::IntValue, ::TextureData>* streamer) {
                       return this->StreamedLoadTexturesInScene(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_LoadTexturesInScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadTexturesInScene(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::grpc::ServerWriter< ::TextureData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedLoadTexturesInScene(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::IntValue,::TextureData>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_LoadObjectsInScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_LoadObjectsInScene() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::IntValue, ::ObjectData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::IntValue, ::ObjectData>* streamer) {
                       return this->StreamedLoadObjectsInScene(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_LoadObjectsInScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadObjectsInScene(::grpc::ServerContext* /*context*/, const ::IntValue* /*request*/, ::grpc::ServerWriter< ::ObjectData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedLoadObjectsInScene(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::IntValue,::ObjectData>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_LoadModelsInScene<WithSplitStreamingMethod_LoadTexturesInScene<WithSplitStreamingMethod_LoadObjectsInScene<Service > > > SplitStreamedService;
  typedef WithSplitStreamingMethod_LoadModelsInScene<WithSplitStreamingMethod_LoadTexturesInScene<WithSplitStreamingMethod_LoadObjectsInScene<WithStreamedUnaryMethod_GetSceneProgress<Service > > > > StreamedService;
};


#endif  // GRPC_proto_2fSceneLoader_2eproto__INCLUDED
