// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/SceneLoader.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fSceneLoader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fSceneLoader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fSceneLoader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fSceneLoader_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fSceneLoader_2eproto;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class FloatValue;
struct FloatValueDefaultTypeInternal;
extern FloatValueDefaultTypeInternal _FloatValue_default_instance_;
class IntValue;
struct IntValueDefaultTypeInternal;
extern IntValueDefaultTypeInternal _IntValue_default_instance_;
class ObjectData;
struct ObjectDataDefaultTypeInternal;
extern ObjectDataDefaultTypeInternal _ObjectData_default_instance_;
class VertexData;
struct VertexDataDefaultTypeInternal;
extern VertexDataDefaultTypeInternal _VertexData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Empty* Arena::CreateMaybeMessage<::Empty>(Arena*);
template<> ::FloatValue* Arena::CreateMaybeMessage<::FloatValue>(Arena*);
template<> ::IntValue* Arena::CreateMaybeMessage<::IntValue>(Arena*);
template<> ::ObjectData* Arena::CreateMaybeMessage<::ObjectData>(Arena*);
template<> ::VertexData* Arena::CreateMaybeMessage<::VertexData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class VertexData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VertexData) */ {
 public:
  inline VertexData() : VertexData(nullptr) {}
  ~VertexData() override;
  explicit PROTOBUF_CONSTEXPR VertexData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VertexData(const VertexData& from);
  VertexData(VertexData&& from) noexcept
    : VertexData() {
    *this = ::std::move(from);
  }

  inline VertexData& operator=(const VertexData& from) {
    CopyFrom(from);
    return *this;
  }
  inline VertexData& operator=(VertexData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VertexData& default_instance() {
    return *internal_default_instance();
  }
  static inline const VertexData* internal_default_instance() {
    return reinterpret_cast<const VertexData*>(
               &_VertexData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VertexData& a, VertexData& b) {
    a.Swap(&b);
  }
  inline void Swap(VertexData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VertexData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VertexData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VertexData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VertexData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VertexData& from) {
    VertexData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VertexData";
  }
  protected:
  explicit VertexData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVXFieldNumber = 1,
    kVYFieldNumber = 2,
    kVZFieldNumber = 3,
    kNXFieldNumber = 4,
    kNYFieldNumber = 5,
    kNZFieldNumber = 6,
    kUFieldNumber = 7,
    kVFieldNumber = 8,
  };
  // float vX = 1;
  void clear_vx();
  float vx() const;
  void set_vx(float value);
  private:
  float _internal_vx() const;
  void _internal_set_vx(float value);
  public:

  // float vY = 2;
  void clear_vy();
  float vy() const;
  void set_vy(float value);
  private:
  float _internal_vy() const;
  void _internal_set_vy(float value);
  public:

  // float vZ = 3;
  void clear_vz();
  float vz() const;
  void set_vz(float value);
  private:
  float _internal_vz() const;
  void _internal_set_vz(float value);
  public:

  // float nX = 4;
  void clear_nx();
  float nx() const;
  void set_nx(float value);
  private:
  float _internal_nx() const;
  void _internal_set_nx(float value);
  public:

  // float nY = 5;
  void clear_ny();
  float ny() const;
  void set_ny(float value);
  private:
  float _internal_ny() const;
  void _internal_set_ny(float value);
  public:

  // float nZ = 6;
  void clear_nz();
  float nz() const;
  void set_nz(float value);
  private:
  float _internal_nz() const;
  void _internal_set_nz(float value);
  public:

  // float u = 7;
  void clear_u();
  float u() const;
  void set_u(float value);
  private:
  float _internal_u() const;
  void _internal_set_u(float value);
  public:

  // float v = 8;
  void clear_v();
  float v() const;
  void set_v(float value);
  private:
  float _internal_v() const;
  void _internal_set_v(float value);
  public:

  // @@protoc_insertion_point(class_scope:VertexData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float vx_;
    float vy_;
    float vz_;
    float nx_;
    float ny_;
    float nz_;
    float u_;
    float v_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fSceneLoader_2eproto;
};
// -------------------------------------------------------------------

class ObjectData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ObjectData) */ {
 public:
  inline ObjectData() : ObjectData(nullptr) {}
  ~ObjectData() override;
  explicit PROTOBUF_CONSTEXPR ObjectData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectData(const ObjectData& from);
  ObjectData(ObjectData&& from) noexcept
    : ObjectData() {
    *this = ::std::move(from);
  }

  inline ObjectData& operator=(const ObjectData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectData& operator=(ObjectData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectData* internal_default_instance() {
    return reinterpret_cast<const ObjectData*>(
               &_ObjectData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObjectData& a, ObjectData& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectData& from) {
    ObjectData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ObjectData";
  }
  protected:
  explicit ObjectData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjNameFieldNumber = 1,
    kVDataFieldNumber = 3,
    kVDataIndexFieldNumber = 2,
  };
  // string objName = 1;
  void clear_objname();
  const std::string& objname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_objname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_objname();
  PROTOBUF_NODISCARD std::string* release_objname();
  void set_allocated_objname(std::string* objname);
  private:
  const std::string& _internal_objname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_objname(const std::string& value);
  std::string* _internal_mutable_objname();
  public:

  // .VertexData vData = 3;
  bool has_vdata() const;
  private:
  bool _internal_has_vdata() const;
  public:
  void clear_vdata();
  const ::VertexData& vdata() const;
  PROTOBUF_NODISCARD ::VertexData* release_vdata();
  ::VertexData* mutable_vdata();
  void set_allocated_vdata(::VertexData* vdata);
  private:
  const ::VertexData& _internal_vdata() const;
  ::VertexData* _internal_mutable_vdata();
  public:
  void unsafe_arena_set_allocated_vdata(
      ::VertexData* vdata);
  ::VertexData* unsafe_arena_release_vdata();

  // int32 vDataIndex = 2;
  void clear_vdataindex();
  int32_t vdataindex() const;
  void set_vdataindex(int32_t value);
  private:
  int32_t _internal_vdataindex() const;
  void _internal_set_vdataindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ObjectData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objname_;
    ::VertexData* vdata_;
    int32_t vdataindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fSceneLoader_2eproto;
};
// -------------------------------------------------------------------

class IntValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IntValue) */ {
 public:
  inline IntValue() : IntValue(nullptr) {}
  ~IntValue() override;
  explicit PROTOBUF_CONSTEXPR IntValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntValue(const IntValue& from);
  IntValue(IntValue&& from) noexcept
    : IntValue() {
    *this = ::std::move(from);
  }

  inline IntValue& operator=(const IntValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntValue& operator=(IntValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntValue* internal_default_instance() {
    return reinterpret_cast<const IntValue*>(
               &_IntValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IntValue& a, IntValue& b) {
    a.Swap(&b);
  }
  inline void Swap(IntValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IntValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IntValue& from) {
    IntValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IntValue";
  }
  protected:
  explicit IntValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:IntValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fSceneLoader_2eproto;
};
// -------------------------------------------------------------------

class FloatValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FloatValue) */ {
 public:
  inline FloatValue() : FloatValue(nullptr) {}
  ~FloatValue() override;
  explicit PROTOBUF_CONSTEXPR FloatValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatValue(const FloatValue& from);
  FloatValue(FloatValue&& from) noexcept
    : FloatValue() {
    *this = ::std::move(from);
  }

  inline FloatValue& operator=(const FloatValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatValue& operator=(FloatValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatValue* internal_default_instance() {
    return reinterpret_cast<const FloatValue*>(
               &_FloatValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FloatValue& a, FloatValue& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FloatValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FloatValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FloatValue& from) {
    FloatValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FloatValue";
  }
  protected:
  explicit FloatValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // float value = 1;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:FloatValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fSceneLoader_2eproto;
};
// -------------------------------------------------------------------

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_proto_2fSceneLoader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VertexData

// float vX = 1;
inline void VertexData::clear_vx() {
  _impl_.vx_ = 0;
}
inline float VertexData::_internal_vx() const {
  return _impl_.vx_;
}
inline float VertexData::vx() const {
  // @@protoc_insertion_point(field_get:VertexData.vX)
  return _internal_vx();
}
inline void VertexData::_internal_set_vx(float value) {
  
  _impl_.vx_ = value;
}
inline void VertexData::set_vx(float value) {
  _internal_set_vx(value);
  // @@protoc_insertion_point(field_set:VertexData.vX)
}

// float vY = 2;
inline void VertexData::clear_vy() {
  _impl_.vy_ = 0;
}
inline float VertexData::_internal_vy() const {
  return _impl_.vy_;
}
inline float VertexData::vy() const {
  // @@protoc_insertion_point(field_get:VertexData.vY)
  return _internal_vy();
}
inline void VertexData::_internal_set_vy(float value) {
  
  _impl_.vy_ = value;
}
inline void VertexData::set_vy(float value) {
  _internal_set_vy(value);
  // @@protoc_insertion_point(field_set:VertexData.vY)
}

// float vZ = 3;
inline void VertexData::clear_vz() {
  _impl_.vz_ = 0;
}
inline float VertexData::_internal_vz() const {
  return _impl_.vz_;
}
inline float VertexData::vz() const {
  // @@protoc_insertion_point(field_get:VertexData.vZ)
  return _internal_vz();
}
inline void VertexData::_internal_set_vz(float value) {
  
  _impl_.vz_ = value;
}
inline void VertexData::set_vz(float value) {
  _internal_set_vz(value);
  // @@protoc_insertion_point(field_set:VertexData.vZ)
}

// float nX = 4;
inline void VertexData::clear_nx() {
  _impl_.nx_ = 0;
}
inline float VertexData::_internal_nx() const {
  return _impl_.nx_;
}
inline float VertexData::nx() const {
  // @@protoc_insertion_point(field_get:VertexData.nX)
  return _internal_nx();
}
inline void VertexData::_internal_set_nx(float value) {
  
  _impl_.nx_ = value;
}
inline void VertexData::set_nx(float value) {
  _internal_set_nx(value);
  // @@protoc_insertion_point(field_set:VertexData.nX)
}

// float nY = 5;
inline void VertexData::clear_ny() {
  _impl_.ny_ = 0;
}
inline float VertexData::_internal_ny() const {
  return _impl_.ny_;
}
inline float VertexData::ny() const {
  // @@protoc_insertion_point(field_get:VertexData.nY)
  return _internal_ny();
}
inline void VertexData::_internal_set_ny(float value) {
  
  _impl_.ny_ = value;
}
inline void VertexData::set_ny(float value) {
  _internal_set_ny(value);
  // @@protoc_insertion_point(field_set:VertexData.nY)
}

// float nZ = 6;
inline void VertexData::clear_nz() {
  _impl_.nz_ = 0;
}
inline float VertexData::_internal_nz() const {
  return _impl_.nz_;
}
inline float VertexData::nz() const {
  // @@protoc_insertion_point(field_get:VertexData.nZ)
  return _internal_nz();
}
inline void VertexData::_internal_set_nz(float value) {
  
  _impl_.nz_ = value;
}
inline void VertexData::set_nz(float value) {
  _internal_set_nz(value);
  // @@protoc_insertion_point(field_set:VertexData.nZ)
}

// float u = 7;
inline void VertexData::clear_u() {
  _impl_.u_ = 0;
}
inline float VertexData::_internal_u() const {
  return _impl_.u_;
}
inline float VertexData::u() const {
  // @@protoc_insertion_point(field_get:VertexData.u)
  return _internal_u();
}
inline void VertexData::_internal_set_u(float value) {
  
  _impl_.u_ = value;
}
inline void VertexData::set_u(float value) {
  _internal_set_u(value);
  // @@protoc_insertion_point(field_set:VertexData.u)
}

// float v = 8;
inline void VertexData::clear_v() {
  _impl_.v_ = 0;
}
inline float VertexData::_internal_v() const {
  return _impl_.v_;
}
inline float VertexData::v() const {
  // @@protoc_insertion_point(field_get:VertexData.v)
  return _internal_v();
}
inline void VertexData::_internal_set_v(float value) {
  
  _impl_.v_ = value;
}
inline void VertexData::set_v(float value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:VertexData.v)
}

// -------------------------------------------------------------------

// ObjectData

// string objName = 1;
inline void ObjectData::clear_objname() {
  _impl_.objname_.ClearToEmpty();
}
inline const std::string& ObjectData::objname() const {
  // @@protoc_insertion_point(field_get:ObjectData.objName)
  return _internal_objname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectData::set_objname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.objname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ObjectData.objName)
}
inline std::string* ObjectData::mutable_objname() {
  std::string* _s = _internal_mutable_objname();
  // @@protoc_insertion_point(field_mutable:ObjectData.objName)
  return _s;
}
inline const std::string& ObjectData::_internal_objname() const {
  return _impl_.objname_.Get();
}
inline void ObjectData::_internal_set_objname(const std::string& value) {
  
  _impl_.objname_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectData::_internal_mutable_objname() {
  
  return _impl_.objname_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectData::release_objname() {
  // @@protoc_insertion_point(field_release:ObjectData.objName)
  return _impl_.objname_.Release();
}
inline void ObjectData::set_allocated_objname(std::string* objname) {
  if (objname != nullptr) {
    
  } else {
    
  }
  _impl_.objname_.SetAllocated(objname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.objname_.IsDefault()) {
    _impl_.objname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ObjectData.objName)
}

// int32 vDataIndex = 2;
inline void ObjectData::clear_vdataindex() {
  _impl_.vdataindex_ = 0;
}
inline int32_t ObjectData::_internal_vdataindex() const {
  return _impl_.vdataindex_;
}
inline int32_t ObjectData::vdataindex() const {
  // @@protoc_insertion_point(field_get:ObjectData.vDataIndex)
  return _internal_vdataindex();
}
inline void ObjectData::_internal_set_vdataindex(int32_t value) {
  
  _impl_.vdataindex_ = value;
}
inline void ObjectData::set_vdataindex(int32_t value) {
  _internal_set_vdataindex(value);
  // @@protoc_insertion_point(field_set:ObjectData.vDataIndex)
}

// .VertexData vData = 3;
inline bool ObjectData::_internal_has_vdata() const {
  return this != internal_default_instance() && _impl_.vdata_ != nullptr;
}
inline bool ObjectData::has_vdata() const {
  return _internal_has_vdata();
}
inline void ObjectData::clear_vdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.vdata_ != nullptr) {
    delete _impl_.vdata_;
  }
  _impl_.vdata_ = nullptr;
}
inline const ::VertexData& ObjectData::_internal_vdata() const {
  const ::VertexData* p = _impl_.vdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::VertexData&>(
      ::_VertexData_default_instance_);
}
inline const ::VertexData& ObjectData::vdata() const {
  // @@protoc_insertion_point(field_get:ObjectData.vData)
  return _internal_vdata();
}
inline void ObjectData::unsafe_arena_set_allocated_vdata(
    ::VertexData* vdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vdata_);
  }
  _impl_.vdata_ = vdata;
  if (vdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ObjectData.vData)
}
inline ::VertexData* ObjectData::release_vdata() {
  
  ::VertexData* temp = _impl_.vdata_;
  _impl_.vdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::VertexData* ObjectData::unsafe_arena_release_vdata() {
  // @@protoc_insertion_point(field_release:ObjectData.vData)
  
  ::VertexData* temp = _impl_.vdata_;
  _impl_.vdata_ = nullptr;
  return temp;
}
inline ::VertexData* ObjectData::_internal_mutable_vdata() {
  
  if (_impl_.vdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::VertexData>(GetArenaForAllocation());
    _impl_.vdata_ = p;
  }
  return _impl_.vdata_;
}
inline ::VertexData* ObjectData::mutable_vdata() {
  ::VertexData* _msg = _internal_mutable_vdata();
  // @@protoc_insertion_point(field_mutable:ObjectData.vData)
  return _msg;
}
inline void ObjectData::set_allocated_vdata(::VertexData* vdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vdata_;
  }
  if (vdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vdata);
    if (message_arena != submessage_arena) {
      vdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vdata_ = vdata;
  // @@protoc_insertion_point(field_set_allocated:ObjectData.vData)
}

// -------------------------------------------------------------------

// IntValue

// int32 value = 1;
inline void IntValue::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t IntValue::_internal_value() const {
  return _impl_.value_;
}
inline int32_t IntValue::value() const {
  // @@protoc_insertion_point(field_get:IntValue.value)
  return _internal_value();
}
inline void IntValue::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void IntValue::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:IntValue.value)
}

// -------------------------------------------------------------------

// FloatValue

// float value = 1;
inline void FloatValue::clear_value() {
  _impl_.value_ = 0;
}
inline float FloatValue::_internal_value() const {
  return _impl_.value_;
}
inline float FloatValue::value() const {
  // @@protoc_insertion_point(field_get:FloatValue.value)
  return _internal_value();
}
inline void FloatValue::_internal_set_value(float value) {
  
  _impl_.value_ = value;
}
inline void FloatValue::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:FloatValue.value)
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fSceneLoader_2eproto
