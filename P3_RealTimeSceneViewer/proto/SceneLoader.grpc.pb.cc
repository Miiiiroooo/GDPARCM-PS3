// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/SceneLoader.proto

#include "SceneLoader.pb.h"
#include "SceneLoader.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* SceneLoader_method_names[] = {
  "/SceneLoader/LoadModelsInScene",
  "/SceneLoader/LoadTexturesInScene",
  "/SceneLoader/LoadObjectsInScene",
};

std::unique_ptr< SceneLoader::Stub> SceneLoader::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SceneLoader::Stub> stub(new SceneLoader::Stub(channel, options));
  return stub;
}

SceneLoader::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_LoadModelsInScene_(SceneLoader_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_LoadTexturesInScene_(SceneLoader_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_LoadObjectsInScene_(SceneLoader_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::ModelData>* SceneLoader::Stub::LoadModelsInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request) {
  return ::grpc::internal::ClientReaderFactory< ::ModelData>::Create(channel_.get(), rpcmethod_LoadModelsInScene_, context, request);
}

void SceneLoader::Stub::async::LoadModelsInScene(::grpc::ClientContext* context, const ::IntValue* request, ::grpc::ClientReadReactor< ::ModelData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ModelData>::Create(stub_->channel_.get(), stub_->rpcmethod_LoadModelsInScene_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ModelData>* SceneLoader::Stub::AsyncLoadModelsInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ModelData>::Create(channel_.get(), cq, rpcmethod_LoadModelsInScene_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ModelData>* SceneLoader::Stub::PrepareAsyncLoadModelsInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ModelData>::Create(channel_.get(), cq, rpcmethod_LoadModelsInScene_, context, request, false, nullptr);
}

::grpc::ClientReader< ::TextureData>* SceneLoader::Stub::LoadTexturesInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request) {
  return ::grpc::internal::ClientReaderFactory< ::TextureData>::Create(channel_.get(), rpcmethod_LoadTexturesInScene_, context, request);
}

void SceneLoader::Stub::async::LoadTexturesInScene(::grpc::ClientContext* context, const ::IntValue* request, ::grpc::ClientReadReactor< ::TextureData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::TextureData>::Create(stub_->channel_.get(), stub_->rpcmethod_LoadTexturesInScene_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::TextureData>* SceneLoader::Stub::AsyncLoadTexturesInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::TextureData>::Create(channel_.get(), cq, rpcmethod_LoadTexturesInScene_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::TextureData>* SceneLoader::Stub::PrepareAsyncLoadTexturesInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::TextureData>::Create(channel_.get(), cq, rpcmethod_LoadTexturesInScene_, context, request, false, nullptr);
}

::grpc::ClientReader< ::ObjectData>* SceneLoader::Stub::LoadObjectsInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request) {
  return ::grpc::internal::ClientReaderFactory< ::ObjectData>::Create(channel_.get(), rpcmethod_LoadObjectsInScene_, context, request);
}

void SceneLoader::Stub::async::LoadObjectsInScene(::grpc::ClientContext* context, const ::IntValue* request, ::grpc::ClientReadReactor< ::ObjectData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ObjectData>::Create(stub_->channel_.get(), stub_->rpcmethod_LoadObjectsInScene_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ObjectData>* SceneLoader::Stub::AsyncLoadObjectsInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ObjectData>::Create(channel_.get(), cq, rpcmethod_LoadObjectsInScene_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ObjectData>* SceneLoader::Stub::PrepareAsyncLoadObjectsInSceneRaw(::grpc::ClientContext* context, const ::IntValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ObjectData>::Create(channel_.get(), cq, rpcmethod_LoadObjectsInScene_, context, request, false, nullptr);
}

SceneLoader::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SceneLoader_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SceneLoader::Service, ::IntValue, ::ModelData>(
          [](SceneLoader::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IntValue* req,
             ::grpc::ServerWriter<::ModelData>* writer) {
               return service->LoadModelsInScene(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SceneLoader_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SceneLoader::Service, ::IntValue, ::TextureData>(
          [](SceneLoader::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IntValue* req,
             ::grpc::ServerWriter<::TextureData>* writer) {
               return service->LoadTexturesInScene(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SceneLoader_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SceneLoader::Service, ::IntValue, ::ObjectData>(
          [](SceneLoader::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IntValue* req,
             ::grpc::ServerWriter<::ObjectData>* writer) {
               return service->LoadObjectsInScene(ctx, req, writer);
             }, this)));
}

SceneLoader::Service::~Service() {
}

::grpc::Status SceneLoader::Service::LoadModelsInScene(::grpc::ServerContext* context, const ::IntValue* request, ::grpc::ServerWriter< ::ModelData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SceneLoader::Service::LoadTexturesInScene(::grpc::ServerContext* context, const ::IntValue* request, ::grpc::ServerWriter< ::TextureData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SceneLoader::Service::LoadObjectsInScene(::grpc::ServerContext* context, const ::IntValue* request, ::grpc::ServerWriter< ::ObjectData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


