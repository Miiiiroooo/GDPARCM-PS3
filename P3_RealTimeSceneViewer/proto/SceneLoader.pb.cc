// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/SceneLoader.proto

#include "SceneLoader.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR VertexData::VertexData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vx_)*/0
  , /*decltype(_impl_.vy_)*/0
  , /*decltype(_impl_.vz_)*/0
  , /*decltype(_impl_.nx_)*/0
  , /*decltype(_impl_.ny_)*/0
  , /*decltype(_impl_.nz_)*/0
  , /*decltype(_impl_.u_)*/0
  , /*decltype(_impl_.v_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VertexDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VertexDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VertexDataDefaultTypeInternal() {}
  union {
    VertexData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VertexDataDefaultTypeInternal _VertexData_default_instance_;
PROTOBUF_CONSTEXPR ObjectData::ObjectData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vdata_)*/nullptr
  , /*decltype(_impl_.vdataindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectDataDefaultTypeInternal() {}
  union {
    ObjectData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectDataDefaultTypeInternal _ObjectData_default_instance_;
PROTOBUF_CONSTEXPR IntValue::IntValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IntValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntValueDefaultTypeInternal() {}
  union {
    IntValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntValueDefaultTypeInternal _IntValue_default_instance_;
PROTOBUF_CONSTEXPR FloatValue::FloatValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FloatValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FloatValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FloatValueDefaultTypeInternal() {}
  union {
    FloatValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FloatValueDefaultTypeInternal _FloatValue_default_instance_;
PROTOBUF_CONSTEXPR Empty::Empty(
    ::_pbi::ConstantInitialized) {}
struct EmptyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyDefaultTypeInternal _Empty_default_instance_;
static ::_pb::Metadata file_level_metadata_proto_2fSceneLoader_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proto_2fSceneLoader_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2fSceneLoader_2eproto = nullptr;

const uint32_t TableStruct_proto_2fSceneLoader_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VertexData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::VertexData, _impl_.vx_),
  PROTOBUF_FIELD_OFFSET(::VertexData, _impl_.vy_),
  PROTOBUF_FIELD_OFFSET(::VertexData, _impl_.vz_),
  PROTOBUF_FIELD_OFFSET(::VertexData, _impl_.nx_),
  PROTOBUF_FIELD_OFFSET(::VertexData, _impl_.ny_),
  PROTOBUF_FIELD_OFFSET(::VertexData, _impl_.nz_),
  PROTOBUF_FIELD_OFFSET(::VertexData, _impl_.u_),
  PROTOBUF_FIELD_OFFSET(::VertexData, _impl_.v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ObjectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ObjectData, _impl_.objname_),
  PROTOBUF_FIELD_OFFSET(::ObjectData, _impl_.vdataindex_),
  PROTOBUF_FIELD_OFFSET(::ObjectData, _impl_.vdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntValue, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FloatValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FloatValue, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::VertexData)},
  { 14, -1, -1, sizeof(::ObjectData)},
  { 23, -1, -1, sizeof(::IntValue)},
  { 30, -1, -1, sizeof(::FloatValue)},
  { 37, -1, -1, sizeof(::Empty)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_VertexData_default_instance_._instance,
  &::_ObjectData_default_instance_._instance,
  &::_IntValue_default_instance_._instance,
  &::_FloatValue_default_instance_._instance,
  &::_Empty_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2fSceneLoader_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027proto/SceneLoader.proto\"j\n\nVertexData\022"
  "\n\n\002vX\030\001 \001(\002\022\n\n\002vY\030\002 \001(\002\022\n\n\002vZ\030\003 \001(\002\022\n\n\002n"
  "X\030\004 \001(\002\022\n\n\002nY\030\005 \001(\002\022\n\n\002nZ\030\006 \001(\002\022\t\n\001u\030\007 \001"
  "(\002\022\t\n\001v\030\010 \001(\002\"M\n\nObjectData\022\017\n\007objName\030\001"
  " \001(\t\022\022\n\nvDataIndex\030\002 \001(\005\022\032\n\005vData\030\003 \001(\0132"
  "\013.VertexData\"\031\n\010IntValue\022\r\n\005value\030\001 \001(\005\""
  "\033\n\nFloatValue\022\r\n\005value\030\001 \001(\002\"\007\n\005Empty2i\n"
  "\013SceneLoader\022.\n\022LoadObjectsInScene\022\t.Int"
  "Value\032\013.ObjectData0\001\022*\n\020GetSceneProgress"
  "\022\t.IntValue\032\013.FloatValueb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_proto_2fSceneLoader_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fSceneLoader_2eproto = {
    false, false, 392, descriptor_table_protodef_proto_2fSceneLoader_2eproto,
    "proto/SceneLoader.proto",
    &descriptor_table_proto_2fSceneLoader_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_proto_2fSceneLoader_2eproto::offsets,
    file_level_metadata_proto_2fSceneLoader_2eproto, file_level_enum_descriptors_proto_2fSceneLoader_2eproto,
    file_level_service_descriptors_proto_2fSceneLoader_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fSceneLoader_2eproto_getter() {
  return &descriptor_table_proto_2fSceneLoader_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fSceneLoader_2eproto(&descriptor_table_proto_2fSceneLoader_2eproto);

// ===================================================================

class VertexData::_Internal {
 public:
};

VertexData::VertexData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:VertexData)
}
VertexData::VertexData(const VertexData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VertexData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vx_){}
    , decltype(_impl_.vy_){}
    , decltype(_impl_.vz_){}
    , decltype(_impl_.nx_){}
    , decltype(_impl_.ny_){}
    , decltype(_impl_.nz_){}
    , decltype(_impl_.u_){}
    , decltype(_impl_.v_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vx_, &from._impl_.vx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.v_) -
    reinterpret_cast<char*>(&_impl_.vx_)) + sizeof(_impl_.v_));
  // @@protoc_insertion_point(copy_constructor:VertexData)
}

inline void VertexData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vx_){0}
    , decltype(_impl_.vy_){0}
    , decltype(_impl_.vz_){0}
    , decltype(_impl_.nx_){0}
    , decltype(_impl_.ny_){0}
    , decltype(_impl_.nz_){0}
    , decltype(_impl_.u_){0}
    , decltype(_impl_.v_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VertexData::~VertexData() {
  // @@protoc_insertion_point(destructor:VertexData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VertexData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VertexData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VertexData::Clear() {
// @@protoc_insertion_point(message_clear_start:VertexData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.v_) -
      reinterpret_cast<char*>(&_impl_.vx_)) + sizeof(_impl_.v_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VertexData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float vX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float vY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float vZ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.vz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float nX = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.nx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float nY = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.ny_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float nZ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.nz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float u = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float v = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VertexData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VertexData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float vX = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vx = this->_internal_vx();
  uint32_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_vx(), target);
  }

  // float vY = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vy = this->_internal_vy();
  uint32_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_vy(), target);
  }

  // float vZ = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vz = this->_internal_vz();
  uint32_t raw_vz;
  memcpy(&raw_vz, &tmp_vz, sizeof(tmp_vz));
  if (raw_vz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_vz(), target);
  }

  // float nX = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nx = this->_internal_nx();
  uint32_t raw_nx;
  memcpy(&raw_nx, &tmp_nx, sizeof(tmp_nx));
  if (raw_nx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_nx(), target);
  }

  // float nY = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ny = this->_internal_ny();
  uint32_t raw_ny;
  memcpy(&raw_ny, &tmp_ny, sizeof(tmp_ny));
  if (raw_ny != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_ny(), target);
  }

  // float nZ = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nz = this->_internal_nz();
  uint32_t raw_nz;
  memcpy(&raw_nz, &tmp_nz, sizeof(tmp_nz));
  if (raw_nz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_nz(), target);
  }

  // float u = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_u = this->_internal_u();
  uint32_t raw_u;
  memcpy(&raw_u, &tmp_u, sizeof(tmp_u));
  if (raw_u != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_u(), target);
  }

  // float v = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_v = this->_internal_v();
  uint32_t raw_v;
  memcpy(&raw_v, &tmp_v, sizeof(tmp_v));
  if (raw_v != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VertexData)
  return target;
}

size_t VertexData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VertexData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float vX = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vx = this->_internal_vx();
  uint32_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    total_size += 1 + 4;
  }

  // float vY = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vy = this->_internal_vy();
  uint32_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    total_size += 1 + 4;
  }

  // float vZ = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vz = this->_internal_vz();
  uint32_t raw_vz;
  memcpy(&raw_vz, &tmp_vz, sizeof(tmp_vz));
  if (raw_vz != 0) {
    total_size += 1 + 4;
  }

  // float nX = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nx = this->_internal_nx();
  uint32_t raw_nx;
  memcpy(&raw_nx, &tmp_nx, sizeof(tmp_nx));
  if (raw_nx != 0) {
    total_size += 1 + 4;
  }

  // float nY = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ny = this->_internal_ny();
  uint32_t raw_ny;
  memcpy(&raw_ny, &tmp_ny, sizeof(tmp_ny));
  if (raw_ny != 0) {
    total_size += 1 + 4;
  }

  // float nZ = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nz = this->_internal_nz();
  uint32_t raw_nz;
  memcpy(&raw_nz, &tmp_nz, sizeof(tmp_nz));
  if (raw_nz != 0) {
    total_size += 1 + 4;
  }

  // float u = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_u = this->_internal_u();
  uint32_t raw_u;
  memcpy(&raw_u, &tmp_u, sizeof(tmp_u));
  if (raw_u != 0) {
    total_size += 1 + 4;
  }

  // float v = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_v = this->_internal_v();
  uint32_t raw_v;
  memcpy(&raw_v, &tmp_v, sizeof(tmp_v));
  if (raw_v != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VertexData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VertexData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VertexData::GetClassData() const { return &_class_data_; }


void VertexData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VertexData*>(&to_msg);
  auto& from = static_cast<const VertexData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VertexData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vx = from._internal_vx();
  uint32_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    _this->_internal_set_vx(from._internal_vx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vy = from._internal_vy();
  uint32_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    _this->_internal_set_vy(from._internal_vy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vz = from._internal_vz();
  uint32_t raw_vz;
  memcpy(&raw_vz, &tmp_vz, sizeof(tmp_vz));
  if (raw_vz != 0) {
    _this->_internal_set_vz(from._internal_vz());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nx = from._internal_nx();
  uint32_t raw_nx;
  memcpy(&raw_nx, &tmp_nx, sizeof(tmp_nx));
  if (raw_nx != 0) {
    _this->_internal_set_nx(from._internal_nx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ny = from._internal_ny();
  uint32_t raw_ny;
  memcpy(&raw_ny, &tmp_ny, sizeof(tmp_ny));
  if (raw_ny != 0) {
    _this->_internal_set_ny(from._internal_ny());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nz = from._internal_nz();
  uint32_t raw_nz;
  memcpy(&raw_nz, &tmp_nz, sizeof(tmp_nz));
  if (raw_nz != 0) {
    _this->_internal_set_nz(from._internal_nz());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_u = from._internal_u();
  uint32_t raw_u;
  memcpy(&raw_u, &tmp_u, sizeof(tmp_u));
  if (raw_u != 0) {
    _this->_internal_set_u(from._internal_u());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_v = from._internal_v();
  uint32_t raw_v;
  memcpy(&raw_v, &tmp_v, sizeof(tmp_v));
  if (raw_v != 0) {
    _this->_internal_set_v(from._internal_v());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VertexData::CopyFrom(const VertexData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VertexData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexData::IsInitialized() const {
  return true;
}

void VertexData::InternalSwap(VertexData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VertexData, _impl_.v_)
      + sizeof(VertexData::_impl_.v_)
      - PROTOBUF_FIELD_OFFSET(VertexData, _impl_.vx_)>(
          reinterpret_cast<char*>(&_impl_.vx_),
          reinterpret_cast<char*>(&other->_impl_.vx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VertexData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fSceneLoader_2eproto_getter, &descriptor_table_proto_2fSceneLoader_2eproto_once,
      file_level_metadata_proto_2fSceneLoader_2eproto[0]);
}

// ===================================================================

class ObjectData::_Internal {
 public:
  static const ::VertexData& vdata(const ObjectData* msg);
};

const ::VertexData&
ObjectData::_Internal::vdata(const ObjectData* msg) {
  return *msg->_impl_.vdata_;
}
ObjectData::ObjectData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ObjectData)
}
ObjectData::ObjectData(const ObjectData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objname_){}
    , decltype(_impl_.vdata_){nullptr}
    , decltype(_impl_.vdataindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.objname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.objname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_objname().empty()) {
    _this->_impl_.objname_.Set(from._internal_objname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_vdata()) {
    _this->_impl_.vdata_ = new ::VertexData(*from._impl_.vdata_);
  }
  _this->_impl_.vdataindex_ = from._impl_.vdataindex_;
  // @@protoc_insertion_point(copy_constructor:ObjectData)
}

inline void ObjectData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objname_){}
    , decltype(_impl_.vdata_){nullptr}
    , decltype(_impl_.vdataindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.objname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.objname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObjectData::~ObjectData() {
  // @@protoc_insertion_point(destructor:ObjectData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.objname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.vdata_;
}

void ObjectData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectData::Clear() {
// @@protoc_insertion_point(message_clear_start:ObjectData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.vdata_ != nullptr) {
    delete _impl_.vdata_;
  }
  _impl_.vdata_ = nullptr;
  _impl_.vdataindex_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string objName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_objname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ObjectData.objName"));
        } else
          goto handle_unusual;
        continue;
      // int32 vDataIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vdataindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .VertexData vData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ObjectData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string objName = 1;
  if (!this->_internal_objname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_objname().data(), static_cast<int>(this->_internal_objname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ObjectData.objName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_objname(), target);
  }

  // int32 vDataIndex = 2;
  if (this->_internal_vdataindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_vdataindex(), target);
  }

  // .VertexData vData = 3;
  if (this->_internal_has_vdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::vdata(this),
        _Internal::vdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ObjectData)
  return target;
}

size_t ObjectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ObjectData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string objName = 1;
  if (!this->_internal_objname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_objname());
  }

  // .VertexData vData = 3;
  if (this->_internal_has_vdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vdata_);
  }

  // int32 vDataIndex = 2;
  if (this->_internal_vdataindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vdataindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectData::GetClassData() const { return &_class_data_; }


void ObjectData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectData*>(&to_msg);
  auto& from = static_cast<const ObjectData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ObjectData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_objname().empty()) {
    _this->_internal_set_objname(from._internal_objname());
  }
  if (from._internal_has_vdata()) {
    _this->_internal_mutable_vdata()->::VertexData::MergeFrom(
        from._internal_vdata());
  }
  if (from._internal_vdataindex() != 0) {
    _this->_internal_set_vdataindex(from._internal_vdataindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectData::CopyFrom(const ObjectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectData::IsInitialized() const {
  return true;
}

void ObjectData::InternalSwap(ObjectData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.objname_, lhs_arena,
      &other->_impl_.objname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.vdataindex_)
      + sizeof(ObjectData::_impl_.vdataindex_)
      - PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.vdata_)>(
          reinterpret_cast<char*>(&_impl_.vdata_),
          reinterpret_cast<char*>(&other->_impl_.vdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fSceneLoader_2eproto_getter, &descriptor_table_proto_2fSceneLoader_2eproto_once,
      file_level_metadata_proto_2fSceneLoader_2eproto[1]);
}

// ===================================================================

class IntValue::_Internal {
 public:
};

IntValue::IntValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IntValue)
}
IntValue::IntValue(const IntValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IntValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:IntValue)
}

inline void IntValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IntValue::~IntValue() {
  // @@protoc_insertion_point(destructor:IntValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IntValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntValue::Clear() {
// @@protoc_insertion_point(message_clear_start:IntValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntValue)
  return target;
}

size_t IntValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IntValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntValue::GetClassData() const { return &_class_data_; }


void IntValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IntValue*>(&to_msg);
  auto& from = static_cast<const IntValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:IntValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntValue::CopyFrom(const IntValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntValue::IsInitialized() const {
  return true;
}

void IntValue::InternalSwap(IntValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fSceneLoader_2eproto_getter, &descriptor_table_proto_2fSceneLoader_2eproto_once,
      file_level_metadata_proto_2fSceneLoader_2eproto[2]);
}

// ===================================================================

class FloatValue::_Internal {
 public:
};

FloatValue::FloatValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:FloatValue)
}
FloatValue::FloatValue(const FloatValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FloatValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:FloatValue)
}

inline void FloatValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FloatValue::~FloatValue() {
  // @@protoc_insertion_point(destructor:FloatValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FloatValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FloatValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FloatValue::Clear() {
// @@protoc_insertion_point(message_clear_start:FloatValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FloatValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FloatValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float value = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FloatValue)
  return target;
}

size_t FloatValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FloatValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float value = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FloatValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FloatValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FloatValue::GetClassData() const { return &_class_data_; }


void FloatValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FloatValue*>(&to_msg);
  auto& from = static_cast<const FloatValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:FloatValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FloatValue::CopyFrom(const FloatValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FloatValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatValue::IsInitialized() const {
  return true;
}

void FloatValue::InternalSwap(FloatValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fSceneLoader_2eproto_getter, &descriptor_table_proto_2fSceneLoader_2eproto_once,
      file_level_metadata_proto_2fSceneLoader_2eproto[3]);
}

// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Empty* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Empty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Empty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fSceneLoader_2eproto_getter, &descriptor_table_proto_2fSceneLoader_2eproto_once,
      file_level_metadata_proto_2fSceneLoader_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::VertexData*
Arena::CreateMaybeMessage< ::VertexData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VertexData >(arena);
}
template<> PROTOBUF_NOINLINE ::ObjectData*
Arena::CreateMaybeMessage< ::ObjectData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ObjectData >(arena);
}
template<> PROTOBUF_NOINLINE ::IntValue*
Arena::CreateMaybeMessage< ::IntValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntValue >(arena);
}
template<> PROTOBUF_NOINLINE ::FloatValue*
Arena::CreateMaybeMessage< ::FloatValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FloatValue >(arena);
}
template<> PROTOBUF_NOINLINE ::Empty*
Arena::CreateMaybeMessage< ::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Empty >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
